var DocumentDBClient = require('documentdb').DocumentClient;

 var DBUtils = {
     // retrieve db - general util
     getDatabase: function (client, databaseId, callback) {
         var querySpec = {
             query: 'SELECT * FROM root r WHERE r.id= @id',
             parameters: [{
                 name: '@id',
                 value: databaseId
             }]
         };

         client.queryDatabases(querySpec).toArray(function (err, results) {
             if (err) {
                 callback(err);
                 
             } else {
                 callback(null, results[0]);
             }
         });
     },
     // retrieve db collection - general util
     getCollection: function (client, databaseLink, collectionId, callback) {
         var querySpec = {
             query: 'SELECT * FROM root r WHERE r.id=@id',
             parameters: [{
                 name: '@id',
                 value: collectionId
             }]
         };             

         client.queryCollections(databaseLink, querySpec).toArray(function (err, results) {
             if (err) {
                 callback(err);
             } else {       
                 callback(null, results[0]);
             }
         });
     },
     // TEST purposes
     getDocumentFromTest: function (client, collectionUrl, collectionId, objectId, callback) {
         var querySpec = {
                        query: 'SELECT * FROM test t WHERE  t.id = @id',
                        parameters: [
                            {
                                name: '@id',
                                value: objectId
                            }
                        ]
          };
          
          client.queryDocuments(collectionUrl, querySpec).toArray(function (err, results) {
              if (err) {
                  callback(err, null);
              } else {
                  callback(null, results[0]);
              }
          });
     },
     
     
     // MOBILE API - retrieve entire product informations
     getDocumentFromProducts: function (client, collectionUrl, productBarcode, callback) {
         // preparing the query to retrieve product from barcode
         var querySpec = {
                        query: 'SELECT * FROM Products p WHERE  p.barcode = @barcode',
                        parameters: [
                            {
                                name: '@barcode',
                                value: productBarcode
                            }
                        ]
          };
          // querying the azure documentdb Products table
          client.queryDocuments(collectionUrl, querySpec).toArray(function (err, results) {
              if (err) {
                  callback(err, null);
              } else {
                  callback(null, results[0]);
              }
          });
     },
     
     // BACKEND API - increment a reached field for the Ingredient item
     incrementReachedIngredient: function (client, collectionUrl, ingredientCode, ingredientUpdated, callback) {
         // retrieving ingredient link
         var ingredientLink = collectionUrl + "/docs/" + ingredientUpdated.id;
         // updating ingredient reached field
         ingredientUpdated.reached++;
         client.replaceDocument(ingredientLink, ingredientUpdated, function (err, updated) {
             if (err) {
                 callback(err, null);
             } else {
                 callback(err, updated);
             }
         });
     },
     
     // MOBILE API - retrieve a single ingredient information about nutrition and 
     // environmental impact
     getDocumentFromIngredients: function (client, collectionUrl, ingredientCode, callback) {
         // preparing the query to retrieve ingredient from ingredient unique code
         var querySpec = {
                        query: 'SELECT * FROM Ingredients i WHERE  i.code = @code',
                        parameters: [
                            {
                                name: '@code',
                                value: ingredientCode
                            }
                        ]
          };
          // querying the azure documentdb Products table
          client.queryDocuments(collectionUrl, querySpec).toArray(function (err, results) {
              if (err) {
                  callback(err, null);
              } else {
                  DBUtils.incrementReachedIngredient(client, collectionUrl, ingredientCode, results[0], function(err, res) {
                      // DUMMY - no action required
                  });
                  callback(null, results[0]);
              }
          });
     },
     
     // MOBILE API - create new User
     createDocumentUser: function(client, collectionUrl, userDefinition, callback) {
          // we simply need to create the new document by passing the JSON definition
          client.createDocument(collectionUrl, userDefinition, function (err, document) {
                if (err) {
                    callback(err, null);
                } else {
                    callback(err, document.id);
                }
          });
     },
     
     // MOBILE API - get User
     getDocumentFromUsers: function (client, collectionUrl, nickname, callback) {
         // preparing the query to retrieve a user by accessing with the user nickname
         var querySpec = {
                        query: 'SELECT * FROM Users u WHERE  u.nickname = @nickname',
                        parameters: [
                            {
                                name: '@nickname',
                                value: nickname
                            }
                        ]
          };
          // querying the azure documentdb Products table
          client.queryDocuments(collectionUrl, querySpec).toArray(function (err, results) {
              if (err) {
                  callback(err, null);
              } else {
                  callback(null, results[0]);
              }
          });
     },
     
     // BACKEND API - updating the user scan history list
     updateUserHistory: function (client, collectionUrl, productBarcode, nickname, like, callback) {
         // retrieving the product to update it
         DBUtils.getDocumentFromUsers(client, collectionUrl, nickname, function(err, results) {
             if (err) {
                 callback(err, null);
             } else {
                 var user = results;
                 // creating history entry
                 var entry = {};
                 entry.product = productBarcode;
                 entry.like = (like) ? "like" : "dislike";
                 // checking for the entry in the history ...
                 user.history.forEach((element) => {
                     if (element.product === entry.product)
                        callback(new Error("Warning: already inserted in history!"), null);
                 });
                 // ... then updating user history
                 user.history.push(entry);
                 // updating the user
                 var userLink = collectionUrl + "/docs/" + user.id;
                 client.replaceDocument(userLink, user, function (err, updated) {
                     if (err) {
                         callback(err, null);
                     } else {
                         callback(err, updated);
                     }
                 });
             }
         });
     },
     
     // BACKEND API - like / dislike social disrupt feature
     updateLikeDislike: function (client, collectionUrl, productBarcode, like, callback) {
         // retrieving the product to update it
         DBUtils.getDocumentFromProducts(client, collectionUrl, productBarcode, function(err, results) {
             if (err) {
                 callback(err, null);
             } else {
                 var product = results;
                 // updating like_dislike attribute
                 if (like) 
                    product.like_dislike = [product.like_dislike[0] + 1, product.like_dislike[1]];
                 if (!like)
                    product.like_dislike = [product.like_dislike[0], product.like_dislike[1] + 1];
                 // updating the product accessing it by its id
                 var productLink = collectionUrl + "/docs/" + product.id;
                 client.replaceDocument(productLink, product, function (err, updated) {
                     if (err) {
                         callback(err, null);
                     } else {
                         callback(err, updated);
                     }
                 });
             }
         });
     },
     
     // MOBILE API - performing like / dislike operation (Disrupting the Tech World!)
     performDisrupt: function (client, collectionUrlProduct, collectionUrlUser, productBarcode, nickname, like, callback) {
         // first of all we perform the product update
         DBUtils.updateLikeDislike(client, collectionUrlProduct, productBarcode, like, function(err, results) {
            if (err)
                callback(err, null); 
         });
         
         // if it succeeds we perform the user update!
         DBUtils.updateUserHistory(client, collectionUrlUser, productBarcode, nickname, like, function(err, results) {
             if (err) {
                callback(err, null);
             } else { 
                callback(err, results);
             }
         });
     }
 
 };

 module.exports = DBUtils;